global:
  keycloakBaseUrl: https://keycloak.openg2p.sandbox.net
  keycloakIssuerUrl: '{{ tpl .Values.global.keycloakBaseUrl $ }}/realms/master'
  idgeneratorBaseUrl: https://idgenerator.openg2p.sandbox.net

nameOverride: openg2p-social-registry

superset:
  enabled: true
  hostname: superset-sr.openg2p.sandbox.net

  oidcIssuerUrl: '{{ tpl .Values.global.keycloakIssuerUrl $ }}'
  oidcClientId: 'openg2p-sr-superset-{{ .Release.Namespace }}'
  oidcClientSecret: ''

  supersetSecretKey: ''

  init:
    createAdmin: false

  postgresql:
    enabled: false

  redis:
    enabled: false

  supersetNode:
    connections:
      redis_host: '{{ .Release.Name }}-superset-redis-headless'
      db_host: '{{ .Release.Name }}-superset-postgresql'

  bootstrapScript: |
    #!/bin/bash
    pip install authlib==1.3.0

  configOverrides:
    enable_oauth: |
      SECRET_KEY = '{{ tpl .Values.supersetSecretKey $ }}' or 'OPENG2P_SUPER_SECRET_KEY'

      # This will make sure the redirect_uri is properly computed, even with SSL offloading
      ENABLE_PROXY_FIX = True

      from flask_appbuilder.security.manager import AUTH_OAUTH
      AUTH_TYPE = AUTH_OAUTH
      OAUTH_PROVIDERS = [
        {
          "name": "keycloak",
          "icon": "fa-key",
          "token_key": "access_token",
          "remote_app": {
            "client_id": "{{ tpl .Values.oidcClientId $ }}",
            "client_secret": "{{ tpl .Values.oidcClientSecret $ }}",
            "api_base_url": "{{ tpl .Values.oidcIssuerUrl $ }}/protocol/openid-connect",
            "client_kwargs": {"scope": "email profile openid"},
            "access_token_url": "{{ tpl .Values.oidcIssuerUrl $ }}/protocol/openid-connect/token",
            "jwks_uri": "{{ tpl .Values.oidcIssuerUrl $ }}/protocol/openid-connect/certs",
            "authorize_url": "{{ tpl .Values.oidcIssuerUrl $ }}/protocol/openid-connect/auth",
            "request_token_url": None
          },
        }
      ]

      # Map Authlib roles to superset roles
      AUTH_ROLES_MAPPING = {
        "Public": ["Public"],
        "Admin": ["Admin"],
      }

      AUTH_ROLES_SYNC_AT_LOGIN = True

      # Will allow user self registration, allowing to create Flask users from Authorized User
      AUTH_USER_REGISTRATION = True

      # The default user self registration role
      # AUTH_USER_REGISTRATION_ROLE = "Public"

      from superset.security import SupersetSecurityManager
      class CustomSsoSecurityManager(SupersetSecurityManager):
        def oauth_user_info(self, provider, response=None):
          if provider == "keycloak":
            me = self.appbuilder.sm.oauth_remotes[provider].get(
              "openid-connect/userinfo"
            )
            me.raise_for_status()
            data = me.json()
            return {
              "username": data.get("preferred_username", ""),
              "first_name": data.get("given_name", ""),
              "last_name": data.get("family_name", ""),
              "email": data.get("email", ""),
              "role_keys": data.get("client_roles", []),
            }
          return {}

      CUSTOM_SECURITY_MANAGER = CustomSsoSecurityManager
      SESSION_COOKIE_HTTPONLY = True
      SESSION_COOKIE_SECURE = True
      SESSION_COOKIE_SAMESITE = None
      TALISMAN_ENABLED = False

  istio:
    enabled: true
    virtualservice:
      enabled: true
      host: ""
      gateway: "internal"
      destination: '{{ .Release.Name }}-superset'
      destinationPort: "8088"
    gateway:
      enabled: false
      host: ""
      ingressController:
        istio: ingressgateway
      httpTlsRedirect: true
      httpEnabled: true
      httpsEnabled: false
      tls:
        mode: SIMPLE
        credentialName: ""

# TODO: Doing this since postgres and redis charts inside superset are old.
supersetPostgresql:
  nameOverride: superset-postgresql
  auth:
    username: superset
    password: superset
    database: superset
  primary:
    extendedConfiguration: |-
      wal_level = logical
      max_wal_senders = 20
      max_replication_slots = 10

supersetRedis:
  nameOverride: superset-redis
  architecture: standalone
  auth:
    enabled: false
  master:
    persistence:
      enabled: false

esignet:
  enabled: false
  hostname: esignet-sr.openg2p.sandbox.net

  captchaEnabled: false
  envVars:
    esignet_captcha_site_key: ''
    esignet_captcha_secret_key: ''

  postgresInit:
    commonAnnotations:
      "helm.sh/hook-weight": "0"

  keygen:
    commonAnnotations:
      "helm.sh/hook-weight": "1"

  mock-identity-system:
    enabled: true
    hostname: esignet-sr.openg2p.sandbox.net
    springConfig:
      names: application,mock-identity-system
      profile: default
      gitRepo:
        enabled: true
        repoUrl: https://github.com/openg2p/mosip-config
        branch: master
      rawConfig: ""
    postgresInit:
      commonAnnotations:
        "helm.sh/hook-weight": "0"
    keygen:
      commonAnnotations:
        "helm.sh/hook-weight": "1"

  springConfig:
    names: application,esignet
    profile: default
    gitRepo:
      enabled: true
      repoUrl: https://github.com/openg2p/mosip-config
      branch: master
    rawConfig: ""

openg2p-sr-bg-tasks:
  enabled: true

  openg2p-sr-bg-tasks-celery-beat-producers:
    enabled: true
    envVars:
      SR_CELERY_BEAT_DB_DBNAME: socialregistrydb
      SR_CELERY_BEAT_DB_PORT: 5432
      SR_CELERY_BEAT_DB_USERNAME: sruser
      SR_CELERY_BEAT_DB_HOSTNAME: '{{ .Release.Name }}-postgresql'
      SR_CELERY_BEAT_CELERY_BROKER_URL: redis://{{ .Release.Name }}-redis-master:6379/0
      SR_CELERY_BEAT_CELERY_BACKEND_URL: redis://{{ .Release.Name }}-redis-master:6379/0
      SR_CELERY_BEAT_MAX_ID_GENERATION_REQUEST_ATTEMPTS: 3
      SR_CELERY_BEAT_MAX_ID_GENERATION_UPDATE_ATTEMPTS: 3
      SR_CELERY_BEAT_RES_PARTNER_ID_GENERATION_FREQUENCY: 60
      SR_CELERY_BEAT_RES_PARTNER_ID_UPDATE_FREQUENCY: 60

    envVarsFrom:
      SR_CELERY_BEAT_DB_PASSWORD:
        secretKeyRef:
          name: '{{ .Release.Name }}-postgresql'
          key: password

  openg2p-sr-bg-tasks-celery-workers:
    enabled: true
    envVars:
      SR_CELERY_WORKERS_DB_DBNAME: socialregistrydb
      SR_CELERY_WORKERS_DB_USERNAME: sruser
      SR_CELERY_WORKERS_DB_HOSTNAME: '{{ .Release.Name }}-postgresql'
      SR_CELERY_WORKERS_DB_PORT: 5432
      SR_CELERY_WORKERS_CELERY_BROKER_URL: redis://{{ .Release.Name }}-redis-master:6379/0
      SR_CELERY_WORKERS_CELERY_BACKEND_URL: redis://{{ .Release.Name }}-redis-master:6379/0
      SR_CELERY_WORKERS_AUTH_URL: '{{ tpl .Values.global.keycloakIssuerUrl $ }}/protocol/openid-connect/token'
      SR_CELERY_WORKERS_AUTH_CLIENT_ID: 'openg2p-sr-bg-tasks-{{ .Release.Namespace }}'
      SR_CELERY_WORKERS_AUTH_CLIENT_SECRET: ''
      SR_CELERY_WORKERS_AUTH_GRANT_TYPE: client_credentials
      SR_CELERY_WORKERS_MOSIP_GET_UIN_URL: '{{ tpl .Values.global.keycloakIssuerUrl $ }}/v1/idgenerator/uin'
      SR_CELERY_WORKERS_MOSIP_UPDATE_UIN_URL: '{{ tpl .Values.global.keycloakIssuerUrl $ }}/v1/idgenerator/uin'

    envVarsFrom:
      SR_CELERY_WORKERS_DB_PASSWORD:
        secretKeyRef:
          name: '{{ .Release.Name }}-postgresql'
          key: password
