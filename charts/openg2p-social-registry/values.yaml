global:
  keycloakBaseUrl: https://keycloak.openg2p.sandbox.net
  keycloakIssuerUrl: '{{ tpl .Values.global.keycloakBaseUrl $ }}/realms/master'

  sysAdminEmail: admin@openg2p.sandbox.net

hostname: socialregistry.openg2p.sandbox.net

odoo:
  enabled: true

  oidcIssuerUrl: '{{ tpl .Values.global.keycloakIssuerUrl $ }}'
  oidcClientId: 'openg2p-sr-{{ .Release.Namespace }}'
  oidcClientSecret: ''

  mailInstallationName: '{{ .Release.Name }}-mail'
  keymanagerInstallationName: '{{ .Release.Name }}-keymanager'
  keymanagerAuthClientId: '{{ tpl .Values.oidcClientId $ }}'
  keymanagerAuthClientSecret: '{{ tpl .Values.oidcClientSecret $ }}'

  extraAddonsUrlsToPull: ''

  image:
    repository: openg2p/openg2p-social-registry-odoo-package
    tag: 17.0-develop
    pullPolicy: Always

  service:
    type: ClusterIP
    port: 80

  # TODO: Remove this and use global.sysAdminEmail
  odooEmail: admin@openg2p.org

  postgresql:
    enabled: true
    auth:
      username: sruser
      database: socialregistrydb
    primary:
      extendedConfiguration: |-
        wal_level = logical
        max_wal_senders = 20
        max_replication_slots = 10
    istio:
      enabled: true
      virtualservice:
        enabled: true
        host: "*"
        gateway: ""
        matchPort: 5432
        destination: '{{ include "postgresql.v1.primary.fullname" .Subcharts.odoo.Subcharts.postgresql }}'
        destinationPort: "5432"
      gateway:
        enabled: true
        port: 5432
        host: "*"
        ingressController:
          istio: ingressgateway
        tls:
          enabled: false
          mode: SIMPLE
          credentialName: ""

  livenessProbe:
    enabled: false

  # TODO: Template the following variables from helm values, instead of hardcoding
  extraEnvVars:
  - name: ODOO_SKIP_MODULES_UPDATE
    value: "yes"
  - name: LIMIT_TIME_REAL
    value: "5000"
  - name: LIST_DB
    value: "False"
  - name: SERVER_WIDE_MODULES
    value: web,queue_job
  # not using bitnami smtpHost and smtpPort variables, because they need user and pass as well.
  - name: OPENG2P_SMTP_HOST
    value: '{{ tpl .Values.mailInstallationName $ }}'
  - name: OPENG2P_SMTP_PORT
    value: "25"
  - name: LOG_HANDLER
    value: '[":INFO"]'
  - name: LOG_DB
    value: "False"
  - name: KEYMANAGER_API_BASE_URL
    value: 'http://{{ tpl .Values.keymanagerInstallationName $ }}/v1/keymanager'
  - name: KEYMANAGER_AUTH_URL
    value: '{{ tpl .Values.oidcIssuerUrl $ }}/protocol/openid-connect/token'
  - name: KEYMANAGER_AUTH_CLIENT_ID
    value: '{{ tpl .Values.keymanagerAuthClientId $ }}'
  - name: KEYMANAGER_AUTH_CLIENT_SECRET
    value: '{{ tpl .Values.keymanagerAuthClientSecret $ }}'
  - name: EXTRA_ADDONS_URLS_TO_PULL
    value: '{{ tpl .Values.extraAddonsUrlsToPull $ }}'

keymanager:
  enabled: true
  hostname: keymanager-sr.openg2p.sandbox.net
  springConfig:
    names: application,kernel
    profile: default
    gitRepo:
      enabled: true
      repoUrl: https://github.com/openg2p/mosip-config
      branch: master
    rawConfig: ""
  envVars:
    auth_server_admin_allowed_audience: 'openg2p-sr,openg2p-sr-{{ .Release.Namespace }},openg2p-pbms,openg2p-pbms-{{ .Release.Namespace }},openg2p-spar-{{ .Release.Namespace }}'
  postgresInit:
    commonAnnotations:
      "helm.sh/hook-weight": "0"
  keygen:
    commonAnnotations:
      "helm.sh/hook-weight": "1"

mail:
  enabled: true
  mailname: openg2p.sandbox.net

odk-central:
  enabled: true
  hostname: odk-sr.openg2p.sandbox.net
  odk-central-mail:
    enabled: true
    # envVars:
  backend:
    envVars:
      OIDC_ENABLED: false
      OIDC_ISSUER_URL: '{{ tpl .Values.global.keycloakIssuerUrl $ }}'
      OIDC_CLIENT_ID: 'openg2p-sr-odk-{{ .Release.Namespace }}'
      OIDC_CLIENT_SECRET: ""

minio:
  enabled: true
  hostname: minio-sr.openg2p.sandbox.net
  persistence:
    enabled: true
    size: 16Gi

  oidcWellKnownConfigUrl: '{{ tpl .Values.global.keycloakIssuerUrl $ }}/.well-known/openid-configuration'
  oidcClientId: 'openg2p-sr-minio-{{ .Release.Namespace }}'
  oidcClientSecret: ''

  extraEnvVars:
  - name: MINIO_IDENTITY_OPENID_CONFIG_URL
    value: '{{ tpl .Values.oidcWellKnownConfigUrl $ }}'
  - name: MINIO_IDENTITY_OPENID_CLIENT_ID
    value: '{{ tpl .Values.oidcClientId $ }}'
  - name: MINIO_IDENTITY_OPENID_CLIENT_SECRET
    value: '{{ tpl .Values.oidcClientSecret $ }}'
  - name: MINIO_IDENTITY_OPENID_DISPLAY_NAME
    value: Keycloak
  - name: MINIO_IDENTITY_OPENID_CLAIM_NAME
    value: client_roles
  - name: MINIO_IDENTITY_OPENID_SCOPES
    value: openid,profile,email
  - name: MINIO_IDENTITY_OPENID_REDIRECT_URI_DYNAMIC
    value: "on"
  - name: MINIO_IDENTITY_OPENID_CLAIM_USERINFO
    value: "on"

  istio:
    enabled: true
    virtualservice:
      enabled: true
      host: ""
      gateway: "internal"
      destination: '{{ include "common.names.fullname" .Subcharts.minio }}'
      destinationPort: "9001"
    gateway:
      enabled: false
      host: ""
      ingressController:
        istio: ingressgateway
      httpTlsRedirect: true
      httpEnabled: true
      httpsEnabled: false
      tls:
        mode: SIMPLE
        credentialName: ""

loggingOpensearch:
  enabled: true
  nameOverride: logging-opensearch
  hostname: opensearch-logging-sr.openg2p.sandbox.net

  oidcWellKnownConfigUrl: '{{ tpl .Values.global.keycloakIssuerUrl $ }}/.well-known/openid-configuration'
  oidcClientId: 'openg2p-sr-logging-opensearch-{{ .Release.Namespace }}'
  oidcClientSecret: ''

  master:
    masterOnly: false
    persistence:
      size: 8Gi
    replicaCount: 1
    heapSize: 256m
    resourcesPreset: "none"

  data:
    replicaCount: 0
    # persistence:
    #   size: 8Gi

  coordinating:
    replicaCount: 0

  ingest:
    replicaCount: 0

  extraVolumes:
  - name: security-config
    configMap:
      name: '{{ include "common.names.fullname" . }}-custom-config'

  extraVolumeMounts:
  - name: security-config
    mountPath: /opt/bitnami/opensearch/config.default/opensearch-security/config.yml
    subPath: opensearch-security-config.yml

  security:
    enabled: true
    tls:
      restEncryption: true
    extraConfig: |-
      _meta:
        type: "config"
        config_version: 2
      config:
        dynamic:
          http:
            anonymous_auth_enabled: false
            xff:
              enabled: false
          authc:
            basic_internal_auth_domain:
              http_enabled: true
              transport_enabled: true
              order: 0
              description: "Authenticate via HTTP Basic against internal users database"
              http_authenticator:
                type: basic
                challenge: false
              authentication_backend:
                type: internal
            openid_auth_domain:
              http_enabled: true
              transport_enabled: true
              order: 1
              description: "Authenticate via Keycloak OIDC"
              http_authenticator:
                type: openid
                challenge: false
                config:
                  subject_key: preferred_username
                  roles_key: client_roles
                  openid_connect_url: '{{ tpl .Values.loggingOpensearch.oidcWellKnownConfigUrl $ }}'
              authentication_backend:
                type: noop
            kerberos_auth_domain:
              http_enabled: false
              transport_enabled: false
            proxy_auth_domain:
              http_enabled: false
              transport_enabled: false
            jwt_auth_domain:
              http_enabled: false
              transport_enabled: false
            clientcert_auth_domain:
              http_enabled: false
              transport_enabled: false
            ldap:
              http_enabled: false
              transport_enabled: false
          authz: {}

  dashboards:
    enabled: true
    replicaCount: 1

    resourcesPreset: "none"

    extraVolumes:
    - name: dashboards-config
      configMap:
        name: '{{ include "common.names.fullname" . }}-custom-config'

    extraVolumeMounts:
    - name: dashboards-config
      mountPath: /opt/bitnami/opensearch-dashboards/config.default/opensearch_dashboards.yml
      subPath: opensearch_dashboards.yml

    extraConfig: |-
      path:
        data: /bitnami/opensearch-dashboards/data
      opensearch:
        requestHeadersAllowlist:
          - authorization
          - securitytenant
        ssl:
          verificationMode: none
      opensearch_security:
        auth:
          type:
          # - basicauth # Enable this to allow password based auth also
          - openid
          multiple_auth_enabled: true
        openid:
          connect_url: '{{ tpl .Values.loggingOpensearch.oidcWellKnownConfigUrl $ }}'
          client_id: '{{ tpl .Values.loggingOpensearch.oidcClientId $ }}'
          client_secret: '{{ tpl .Values.loggingOpensearch.oidcClientSecret $ }}'
          base_redirect_url: 'https://{{ .Values.loggingOpensearch.hostname }}'
          logout_url: ""
        ui:
          openid:
            login:
              buttonname: "Log in with Keycloak"
        multitenancy:
          enabled: false # Enable this if multi tenancy is needed.
          tenants:
            preferred:
            - Global
            - Private
        readonly_mode:
          roles:
          - kibana_read_only

  loggingOutput:
    enabled: true
    type: opensearch
    scheme: https
    host: '{{ include "common.names.fullname" .Subcharts.loggingOpensearch }}.{{ .Release.Namespace }}'
    port: "9200"
    user: logstash
    passwordFrom:
      secretKeyRef:
        key: logstash-password
        name: '{{ include "common.names.fullname" .Subcharts.loggingOpensearch }}'
    extraConfig:
      ssl_verify: false
      logstash_format: true
      suppress_type_name: true
      buffer:
        flush_interval: 10s
        flush_mode: interval

  istio:
    enabled: true
    virtualservice:
      enabled: true
      host: ""
      gateway: "internal"
      destination: '{{ include "common.names.fullname" .Subcharts.loggingOpensearch }}-dashboards'
      destinationPort: "5601"
    gateway:
      enabled: false
      host: ""
      ingressController:
        istio: ingressgateway
      httpTlsRedirect: true
      httpEnabled: true
      httpsEnabled: false
      tls:
        mode: SIMPLE
        credentialName: ""

reporting:
  enabled: true
  kafka:
    enabled: true
  kafkaUi:
    enabled: true
    hostname: kafka-reporting-sr.openg2p.sandbox.net
    oidcClientId: 'openg2p-sr-reporting-kafka-{{ .Release.Namespace }}'
    oidcClientSecret: ''
  opensearch:
    enabled: true
    hostname: opensearch-reporting-sr.openg2p.sandbox.net
    oidcClientId: 'openg2p-sr-reporting-opensearch-{{ .Release.Namespace }}'
    oidcClientSecret: ''

reporting-init:
  enabled: true
  reportingInstallationName: '{{ .Release.Name }}-reporting'
  opensearchInstallationName: '{{ .Release.Name }}-reporting-opensearch'
  postgresqlInstallationName: '{{ .Release.Name }}-postgresql'
  gitConfig:
    enabled: true
    repoUrl: https://github.com/openg2p/openg2p-reporting
    branch: develop
    subDir: "scripts/social-registry"
  envVars:
    DB_NAME: socialregistrydb
  hookAnnotations:
    "helm.sh/hook-weight": "0"

loggingFlow:
  enabled: true
  opensearchInstallationName: '{{ include "common.names.fullname" .Subcharts.loggingOpensearch }}'
  outputRef: '{{ tpl .Values.loggingFlow.opensearchInstallationName $ }}'
  extraLocalOutputRefs: []
  globalOutputRefs: []
  parser:
    key_name: message
    parse:
      type: regexp
      expression: /^(?<asctime>(\S+)(\s)(\S+))\s+(?<pid>\S+)\s+(?<levelname>\S+)\s+(?<dbname>\S+)\s+(?<name>\S+)\s+(?<message>.*)$/
    remove_key_name_field: true
    replace_invalid_sequence: true
    reserve_data: true
  extraFilters: []

istio:
  enabled: true
  virtualservice:
    enabled: true
    host: ""
    gateway: "internal"
    destination: '{{ include "common.names.fullname" .Subcharts.odoo }}'
    destinationPort: '{{ .Values.odoo.service.port }}'
    prefix: /
    rewriteUri: ""
  gateway:
    enabled: false
    host: ""
    ingressController:
      istio: ingressgateway
    httpTlsRedirect: true
    httpEnabled: true
    httpsEnabled: false
    tls:
      mode: SIMPLE
      credentialName: ""
